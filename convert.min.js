var CONVERTED_HTML_OUTPUT = ""; function processFile(e) { if (null == e && "" === $("#fileForm input[type=file]").val()) return alert(lajax.t("Please select a document to convert")), !1; var t = new FormData; if (t.append("embedImages", $("#embedImages").is(":checked")), t.append("fullPageMode", $("#fullPageMode").is(":checked")), t.append("fixedHtml", $("#fixedHtml").is(":checked")), t.append("convertPage", !0), null == e) for (var o = $("#fileForm input[type=file]")[0].files, n = 0; n < o.length; n++)t.append("file", o[n]); else t.append("file", e); return loading(), $("#convertButton").prop("disabled", !0), $.ajax({ type: "POST", url: "/site/convert", cache: !1, processData: !1, contentType: !1, data: t, dataType: "json" }).done(function (e) { !1 === e.error ? ($("#convertedFileButtons").fadeIn(), $("#convertedFileName").text(e.name), $("#previewFile").prop("href", e.url), $("#downloadFile").prop("data-id", e.id), CONVERTED_HTML_OUTPUT = e.ret) : alert(e.ret) }).always(function () { $("#doc").val(""), $("#convertButton").prop("disabled", !1), loaded() }).fail(showError), !1 } function downloadConvertedFile() { $("#downloadFile").prop("disabled", !0); var e = $("#downloadFile").prop("data-id"); return ajaxCall({ id: e }, "/site/download-converted-file", function (e) { var t = document.createElement("a"); t.href = e.downloadUrl, t.download = e.fileName, document.body.appendChild(t), t.click(), document.body.removeChild(t), $("#downloadFile").prop("disabled", !1), trackEvent("Download converted file", "click") }), !1 } function editConvertedFile(e) { setHtmlContent(CONVERTED_HTML_OUTPUT), setOption(SELECTED_DOC_ID, null), window.open(e, "_blank") } function deleteConvertedFile() { return loading(), $("#deleteFile").prop("disabled", !0), $.ajax({ type: "POST", url: "/site/delete-converted-file", cache: !1, processData: !1, contentType: !1, dataType: "json" }).done(function (e) { !1 === e.error ? ($("#convertedFileButtons").fadeOut(), CONVERTED_HTML_OUTPUT = "") : alert(e.ret) }).always(function () { loaded() }).fail(showError), !1 } function checkInputDocFileTypeAndConvertToHTML() { checkInputDocFileType() && processFile() } function checkSelectedManyFilesTypeAndConvert() { checkManyFilesTypeAndConvert(document.getElementById("doc").files) } function checkManyFilesTypeAndConvert(e) { let t = [], o = !1; for (var n = 0; n < e.length; n++) { var l = e[n].name.toLowerCase(); checkDocFileType(l) ? t.push(e[n]) : o = !0 } 0 < t.length ? convertFile(t) : o ? document.getElementById("doc").value = "" : alert(lajax.t("No files to convert")) } function checkInputDocFileType(e) { var t = ""; switch ((t = null == e ? document.getElementById("doc").value.toLowerCase() : e.name).substring(t.length - 4, t.length).toLowerCase().replace(".", "")) { case "doc": case "docx": case "rtf": case "txt": case "odt": case "htm": case "html": case "pdf": return !0; default: return alert(lajax.t("File type not allowed.\n Allowed file types: docx, doc, pdf, rtf, txt, odt, html.")), document.getElementById("doc").value = "", !1 } } function dropHandlerConvertToHtml(t) { if (t.preventDefault(), t.dataTransfer.items) { for (let e = 0; e < t.dataTransfer.items.length; e++)if ("file" === t.dataTransfer.items[e].kind) { var o = t.dataTransfer.items[e].getAsFile(); checkInputDocFileType(o) && processFile(o); break } } else for (let e = 0; e < t.dataTransfer.files.length; e++) { checkInputDocFileType(t.dataTransfer.files[e]) && processFile(t.dataTransfer.files[e]); break } } function dropHandlerConvertTo(o) { if (o.preventDefault(), o.dataTransfer.items) { let t = []; for (let e = 0; e < o.dataTransfer.items.length; e++) { var n; "file" === o.dataTransfer.items[e].kind && (n = o.dataTransfer.items[e].getAsFile(), t.push(n)) } 0 < t.length && checkManyFilesTypeAndConvert(t) } else console.log("drag and drop via files"), checkManyFilesTypeAndConvert(o.dataTransfer.files) } var filesToConvert = null, filesToConvertCount = 0, currentlyConvertedFile = 0; function convertFile(e) { if (null == e && "" === $("#fileForm input[type=file]").val() && 0 == currentlyConvertedFile) return alert(lajax.t("Please select a document to convert")), !1; if (null != e) filesToConvert = e; else if (null == filesToConvert) { filesToConvert = new Array; for (var t = 0; t < $("#fileForm input[type=file]")[0].files.length; t++)filesToConvert.push($("#fileForm input[type=file]")[0].files[t]) } if ((filesToConvertCount = filesToConvert.length) > MAX_BATCH_DOCUMENTS_TO_CONVERT && isR && isP) return alert(lajax.t("You can only convert up to {n} documents at once. Please select less documents to convert or upgrade to a higher plan.", { n: MAX_BATCH_DOCUMENTS_TO_CONVERT })), !1; 0 == currentlyConvertedFile && ($("#convertedFiles").html(""), $("#convertedFileButtonsAllDocs").fadeOut()); e = new FormData; return e.append("inputFormat", $("#inputFormat").val()), e.append("outputFormat", $("#outputFormat").val()), e.append("file", filesToConvert[currentlyConvertedFile]), 1 < filesToConvertCount && isP && (e.append("filesToConvert", filesToConvertCount), e.append("currentlyConvertedFile", currentlyConvertedFile)), loading(), $("#convertButton").prop("disabled", !0), $.ajax({ type: "POST", url: "/convert/convert-to", cache: !1, processData: !1, contentType: !1, data: e, dataType: "json" }).done(function (e) { if (!1 === e.error) if (0 < filesToConvertCount && $("#convertedFiles").append('<div class="convertedFileName" data-id="' + e.docID + '"><a href="' + e.fileURL + '" download="' + e.fileName + '">' + e.fileName + "</a></div>"), 1 == filesToConvertCount) { const t = document.createElement("a"); t.style.display = "none", t.href = e.fileURL, t.download = e.fileName, document.body.appendChild(t), t.click(), window.URL.revokeObjectURL(e.fileURL), resetConvertedFiles() } else 1 < filesToConvertCount && (isP ? convertNextDocument() : alert(lajax.t("You need to GO PRO if you want to convert more than one file..."))); else 1 < filesToConvertCount ? (displayDocConversionError(filesToConvert[currentlyConvertedFile].name, e.ret), convertNextDocument()) : (alert(e.ret), resetConvertedFiles()) }).always(function () { $("#doc").val(""), $("#convertButton").prop("disabled", !1), loaded() }).fail(function (e) { console.log("conversion failure", e), 1 < filesToConvertCount ? (displayDocConversionError(filesToConvert[currentlyConvertedFile].name, e.status + ": " + e.statusText), convertNextDocument()) : (showError(e), resetConvertedFiles()) }), !1 } function downloadAllConvertedFiles() { var e; return 0 < $(".convertedFileName").length && ($("#downloadAllFiles").prop("disabled", !0), e = new Array, $(".convertedFileName").each(function () { e.push($(this).attr("data-id")) }), ajaxCall({ ids: e }, "/convert/download-all-converted-files", function (e) { $("#downloadAllFiles").prop("disabled", !1), downloadFile(e.zipUrl, e.fileName), trackEvent("Download all converted files", "click") })), !1 } function resetConvertedFiles() { filesToConvertCount = currentlyConvertedFile = 0, filesToConvert = null } function convertNextDocument() { 1 < filesToConvertCount && currentlyConvertedFile < filesToConvertCount - 1 ? isP ? (currentlyConvertedFile++, convertFile()) : (isR ? alert(lajax.t("You can only convert one document at a time in a trial mode. Please go PRO to convert multiple documents at once.")) : alert(lajax.t("Please go PRO to convert multiple documents at once.")), resetConvertedFiles()) : (filesToConvertCount <= 1 ? showNotification(lajax.t("Document converted.")) : (showNotification(lajax.t("All documents converted.")), $("#convertedFileButtonsAllDocs").fadeIn(), trackEvent("Convert many documents", "convert", filesToConvertCount.toString())), resetConvertedFiles()) }